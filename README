(English version of README is in the second half of this file.)

Sayuri - UCI用チェスエンジン
Copyright (c) 2013 Hironori Ishibashi
================================================================================
SayuriはC++11の標準ライブラリのみで作ったUCI対応チェスエンジンです。
全てのソースファイルはsrcディレクトリにあります。
C++11のソースコードをサポートしているコンパイラでビルドできます。
CMakeを使うことで、簡単にビルドすることができます。

コンパイル済みバイナリファイルは以下のディレクトリにあります。
    Linux用64ビット版: SayuriCompiled/Linux/For64Bit


--------------------------------------------------------------------------------
CMakeを使ったビルド方法
--------------------------------------------------------------------------------
CMakeを使って簡単にビルドすることができます。
使用するコンパイラはデフォルトで「clang++」となります。
(コンパイラを変更したいときは、
CMakeLists.txtの26行目、27行目のコンパイラ設定を変更してください。)

以下、ビルド手順。
1. CMakeLists.txtのあるディレクトリに移動します。
2. 以下のコマンドを実行します。
    $ mkdir build
    $ cd build
    $ cmake ..
    $ make
3. buildディレクトリ内にsayuriという実行ファイルができます。


--------------------------------------------------------------------------------
デバッグモードでのCMakeを使ったビルド方法
--------------------------------------------------------------------------------
デバッグモードでビルドすると、最適化無しでビルドすることができます。

以下、ビルド手順。
1. CMakeLists.txtのあるディレクトリに移動します。
2. 以下のコマンドを実行します。
    $ mkdir build
    $ cd build
    $ cmake -DCMAKE_BUILD_TYPE=Debug ..
    $ make
3. buildディレクトリ内にsayuriという実行ファイルができます。


--------------------------------------------------------------------------------
配布用パッケージの作り方
--------------------------------------------------------------------------------
CMakeでMakefileを作った後以下のコマンドを実行してください。
    $ make dist

これで以下の3つの配布用パッケージが出来上がります。
    sayuri-xxxx.xx.xx.tar.Z
    sayuri-xxxx.xx.xx.tar.bz2
    sayuri-xxxx.xx.xx.tar.gz
(注)'xxxx.xx.xx'にはバージョン番号が入ります。


--------------------------------------------------------------------------------
UCIオプション
--------------------------------------------------------------------------------
以下のコマンドでエンジンの設定を変更できます。

ハッシュテーブルのサイズを変更。(デフォルトは32。最大は8192。最小は8。)
    setoption name Hash value <サイズ、メガバイト>

ハッシュテーブルを初期化。
    setoption name Clear Hash

Ponderの有効化、無効化。(デフォルトはtrue。)
    setoption name Ponder value <true、又はfalse>

探索用スレッドの数。(デフォルトは1。最大は64。最小は1。)
    setoption name Threads value <スレッドの数>

アナライズモードの有効化、無効化。(デフォルトはfalse。)
    setoption name UCI_AnalyseMode value <true、又はfalse>


*******************
* English Version *
*******************
================================================================================
Sayuri - Chess Engine for UCI
Copyright (c) 2013 Hironori Ishibashi
================================================================================
Sayuri is a chess engine for UCI that is created by C++11 standard libraries only.
All source files are in "src" directory.
You can build Sayuri with any compiler that supports C++11 source code.
You can easily build it with CMake.

The Compiled binaries are in following directories.
    Linux 64-bit: SayuriCompiled/Linux/For64Bit


--------------------------------------------------------------------------------
How to build Sayuri with CMake
--------------------------------------------------------------------------------
Sayuri can be easily built with CMake.
The default compiler is "clang++". (If you want to change the compiler, you should change the 26th and 27th line of CMakeLists.txt.)

How to build:
    1. Change the working directory to which has CMakeLists.txt file.
    2. Execute following commands.
        $ mkdir build
        $ cd build
        $ cmake ..
        $ make
    3. The executable file named "sayuri" has been built in "build" directory.


--------------------------------------------------------------------------------
How to build Sayuri with CMake in debug mode
--------------------------------------------------------------------------------
You can build Sayuri without optimization in debug mode.

How to build:
    1. Change the working directory to which has CMakeLists.txt file.
    2. Execute following commands.
        $ mkdir build
        $ cd build
        $ cmake -DCMAKE_BUILD_TYPE=Debug ..
        $ make
    3. The executable file named "sayuri" has been built in "build" directory.


--------------------------------------------------------------------------------
How to build distributable source code packages
--------------------------------------------------------------------------------
Execute a following command after making Makefile by CMake.
    $ make dist

And then following three packages will be created.
    sayuri-xxxx.xx.xx.tar.Z
    sayuri-xxxx.xx.xx.tar.bz2
    sayuri-xxxx.xx.xx.tar.gz
(Note) 'xxxx.xx.xx' is a version number.


--------------------------------------------------------------------------------
UCI Options
--------------------------------------------------------------------------------
With following commands, you can change setup of Sayuri.

Change the size(megabytes) of a hash table.
(Default is 32. Maximum is 8192. Minimum is 8.)
    setoption name Hash value <size(megabytes)>

Initialize the hash table.
    setoption name Clear Hash

Enable ponder.
(Default is "true".)
    setoption name Ponder value <true or false>

Change the number of threads.
(Default is 1. Maximum is 64. Minimum is 1.)
    setoption name Threads value <the number of threads>

Enable analyse mode.
(Default is "false".)
    setoption name UCI_AnalyseMode value <true or false>
