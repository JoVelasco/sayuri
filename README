(English version of README is in the second half of this file.)

Sayuri - UCI用チェスエンジン
Copyright (c) 2014 Hironori Ishibashi
================================================================================
SayuriはC++11の標準ライブラリのみで作ったUCI対応チェスエンジンです。
全てのソースファイルはsrcディレクトリにあります。
C++11のソースコードをサポートしているコンパイラでビルドできます。
CMakeを使うことで、簡単にビルドすることができます。

コンパイル済みバイナリファイルは以下のディレクトリにあります。
    Linux用64ビット版: SayuriCompiled/Linux/For64Bit

Sayuriによる他のエンジンとのサンプルゲームは「SampleGames」
ディレクトリにあります。

Sayuriのロゴ画像は「SayuriLogo」ディレクトリにあります。


--------------------------------------------------------------------------------
CMakeを使ったビルド方法
--------------------------------------------------------------------------------
CMakeを使って簡単にビルドすることができます。
使用するコンパイラはデフォルトで「clang++」となります。
(コンパイラを変更したいときは、
CMakeLists.txtの26行目、27行目のコンパイラ設定を変更してください。)

以下、ビルド手順。
1. CMakeLists.txtのあるディレクトリに移動します。
2. 以下のコマンドを実行します。
    $ mkdir build
    $ cd build
    $ cmake ..
    $ make
3. buildディレクト内に以下のファイル/ディレクトリが完成します。
    * sayuri: 実行ファイル。
    * libsayurilib.a: 静的ライブラリ。
    * include: 静的ライブラリ用ヘッダファイルの入ったディレクトリ。


--------------------------------------------------------------------------------
デバッグモードでのCMakeを使ったビルド方法
--------------------------------------------------------------------------------
デバッグモードでビルドすると、最適化無しでビルドすることができます。

以下、ビルド手順。
1. CMakeLists.txtのあるディレクトリに移動します。
2. 以下のコマンドを実行します。
    $ mkdir build
    $ cd build
    $ cmake -DCMAKE_BUILD_TYPE=Debug ..
    $ make
3. buildディレクト内に以下のファイル/ディレクトリが完成します。
    * sayuri: 実行ファイル。
    * libsayurilib.a: 静的ライブラリ。
    * include: 静的ライブラリ用ヘッダファイルの入ったディレクトリ。


--------------------------------------------------------------------------------
CMakeで作成した際の各ファイルについて
--------------------------------------------------------------------------------
「sayuri」はUCIチェスエンジンです。
    通常のUCIエンジンとして利用する場合はこのファイルのみ使います。
    その場合、「libsayurilib.a」と「include」は削除して構いません。

「libsayurilib.a」と「include」はSayuriを
静的ライブラリとして使用する際に使います。
    Sayuriをあなたのプログラムに組み込む際に使う静的ライブラリです。
    「include」ディレクトリにSayuriの全ヘッダファイルがあるので、
    それらと共に使用します。
    その場合、「sayuri」は使用しません。削除して構いません。


--------------------------------------------------------------------------------
libsayurilib.aの使い方

(注) Sayuriは「MIT License」ソフトウェアです。
「libsayurilib.a」を利用したソフトウェアを作成する際は、
本「LICENSE」ファイル内の英語表記部分をどこかに表示してください。
例えば、あなたのソフトウェアのREADMEやLICENSEファイルに表記をコピペするなど。
そのルールだけ守ればあとは何に利用しようと自由です。
--------------------------------------------------------------------------------
Sayuriはマルチスレッドプログラムなので、Linuxを使っている場合は、
コンパイルの際、pthreadをリンクさせる必要があります。

Sayuriのネームスペースは「Sayuri」です。

【準備】
include/sayuri.hをソースコードにインクルードします。

ライブラリを使用する前に以下の関数でライブラリを初期化します。

    Sayuri::Init();

(注) 初期化は必ずしてください。初期化しないとライブラリは正しく動きません。

エンジンとUCIシェルを作成します。
Sayuri::ChessEngineは思考部分です。
Sayuri::UCIShellはSayuri::ChessEngineと外部をUCIコマンドで仲介するクラスです。
以下のコードで作成します。

    Sayuri::ChessEngine engine();
    Sayuri::UCIShell shell(engine);

    又は、

    Sayuri::ChessEngine* engine_ptr = new Sayuri::ChessEngine();
    Sayuri::UCIShell* shell_ptr = new Sayuri::UCIShell(*engine_ptr);

    又は、

    #include <memory>
    std::unique_ptr<Sayuri::ChessEngine>
    engine_ptr(new Sayuri::ChessEngine());
    std::unique_ptr<Sayuri::UCIShell>
    shell_ptr(new Sayuri::UCIShell(*engine_ptr));

【ライブラリの操作方法】
ライブラリは通常のUCIエンジンの操作とよく似ていて、
UCIコマンドを使って操作します。

ライブラリへの入力は、以下のSayuri::UCIShellオブジェクトの関数の
input引数にUCIコマンドを渡して行います。

    void UCIShell::InputCommand(const std::string& input)

ライブラリからの出力はコールバック関数で受け取ります。
コールバック関数の型は以下のとおりです。

    void name_of_function(const std::string& name_of_param)

name_of_paramにライブラリからの出力が入力されます。

コールバック関数は、以下のSayuri::UCIShellオブジェクトの以下の関数の
func引数に渡して登録します。

    void
    UCIShell::AddOutputListener(std::function<void(const std::string&)> func)

【具体例】
簡単な例は以下のようになります。

    #include <iostream>
    #include <string>
    #include <memory>

    #include "include/sayuri.h"  // Sayuriライブラリのヘッダファイル。

    // ライブラリからの出力を受け取るコールバック関数。
    // この例では出力をそのまま標準出力に流している。

    void Print(const std::string& message) {
        std::cout << message << std::endl;
    }

    // メイン。

    int main(int argc, char* argv[]) {

        /********/
        /* 準備 */
        /********/
        // ライブラリの初期化。必ずやる。

        Sayuri::Init();

        // 思考部分の作成。

        std::unique_ptr<Sayuri::ChessEngine>
        engine_ptr(new Sayuri::ChessEngine());

        // UCIコマンドを思考部分に渡すクラスを作成。

        std::unique_ptr<Sayuri::UCIShell>
        shell_ptr(new Sayuri::UCIShell(*engine_ptr));

        // ライブラリからの出力を受け取るコールバック関数を登録。

        shell_ptr->AddOutputListener(Print);

        /********************/
        /* ライブラリの操作 */
        /********************/
        // InputCommand()でライブラリに指示する。

        shell->InputCommand("uci");

        // ID、オプション、"uciok"の出力がPrint()に送られる。

        shell->InputCommand("isready");

        // "readyok"の出力がPrint()に送られる。

        shell->InputCommand("position startpos");
        shell->InputCommand("isready");

        // "readyok"の出力がPrint()に送られる。

        shell->InputCommand("go depth 10");

        // 別スレッドが起動し、思考開始。
        // 思考は別スレッドで行われるので制御がすぐに戻ってくる。

        while (......) {......}

        // 思考終了まで待つ。
        // 思考中は"info ..."という出力がPrint()にたくさん送られる。
        // 思考終了後は"bestmove ..."という出力で最善手がPrint()に送られる。

        return 0;
    }


--------------------------------------------------------------------------------
配布用パッケージの作り方
--------------------------------------------------------------------------------
CMakeでMakefileを作った後以下のコマンドを実行してください。
    $ make dist

これで以下の3つの配布用パッケージが出来上がります。
    sayuri-xxxx.xx.xx.tar.Z
    sayuri-xxxx.xx.xx.tar.bz2
    sayuri-xxxx.xx.xx.tar.gz
(注)'xxxx.xx.xx'にはバージョン番号が入ります。


--------------------------------------------------------------------------------
UCIオプション
--------------------------------------------------------------------------------
以下のコマンドでエンジンの設定を変更できます。

ハッシュテーブルのサイズを変更。(デフォルトは32。最大は8192。最小は8。)
    setoption name Hash value <サイズ、メガバイト>

ハッシュテーブルを初期化。
    setoption name Clear Hash

Ponderの有効化、無効化。(デフォルトはtrue。)
    setoption name Ponder value <true、又はfalse>

探索用スレッドの数。(デフォルトは1。最大は64。最小は1。)
    setoption name Threads value <スレッドの数>

アナライズモードの有効化、無効化。(デフォルトはfalse。)
    setoption name UCI_AnalyseMode value <true、又はfalse>


*******************
* English Version *
*******************
================================================================================
Sayuri - Chess Engine for UCI
Copyright (c) 2014 Hironori Ishibashi
================================================================================
Sayuri is a chess engine for UCI that is created by
C++11 standard libraries only.
All source files are in "src" directory.
You can build Sayuri with any compiler that supports C++11 source code.
You can easily build it with CMake.

The Compiled binaries are in following directories.
    Linux 64-bit: SayuriCompiled/Linux/For64Bit

There are sample games of Sayuri vs other engines in "SampleGames" directory.

There are images of Sayuri's logo in "SayuriLogo" directory.


--------------------------------------------------------------------------------
How to build Sayuri with CMake
--------------------------------------------------------------------------------
Sayuri can be easily built with CMake.
The default compiler is "clang++". (If you want to change the compiler,
you should change the 26th and 27th line of CMakeLists.txt.)

How to build:
    1. Change the working directory to which has CMakeLists.txt file.
    2. Execute following commands.
        $ mkdir build
        $ cd build
        $ cmake ..
        $ make
    3. The executable file named "sayuri" has been built in "build" directory.
    3. Following files/directory have been created in "build" directory.
        * sayuri: Executable file.
        * libsayurilib.a: Static library.
        * include: A directory for libsayurilib.a.


--------------------------------------------------------------------------------
How to build Sayuri with CMake in debug mode
--------------------------------------------------------------------------------
You can build Sayuri without optimization in debug mode.

How to build:
    1. Change the working directory to which has CMakeLists.txt file.
    2. Execute following commands.
        $ mkdir build
        $ cd build
        $ cmake -DCMAKE_BUILD_TYPE=Debug ..
        $ make
    3. Following files/directory have been created in "build" directory.
        * sayuri: Executable file.
        * libsayurilib.a: Static library.
        * include: A directory for libsayurilib.a.


--------------------------------------------------------------------------------
About each files created when using CMake.
--------------------------------------------------------------------------------
"sayuri" is an executable UCI chess engine.
    When you want to use Sayuri as UCI chess engine, you use this file only.
    If so, you can delete "libsayurilib.a" and "include".

"libsayurilib.a" and "include" are files when you use Sayuri as static library.
    These files are used when you put Sayuri in your program.
    All header files are in "include" directory.
    You can use these headers with the static library.
    If so, you don't need "sayuri" file. You can delete it.


--------------------------------------------------------------------------------
How to use libsayurilib.a

(Note!!) Sayuri is "MIT License" software.
If you make software with "libsayurilib.a",
you have to display English part of Sayuri's "LICENSE" file on somewhere.
For example, to copy and paste it onto
your README or LICENSE file of your software.
If you do so, you can use "libsayurilib.a" freely.
--------------------------------------------------------------------------------
Sayuri is a multithreading program.
So when you compile your program with libsayurilib.a,
if you use Linux, you need to link pthread to your program. 

Namespace of Sayuri is "Sayuri".

[Preparation]
Include "include/sayuri.h"
Before using the library, you must initialize Sayuri with following function.

    Sayuri::Init();

(Note!!) You "must" initialize the library before using it,
because if you don't do so, the library doesn't work well.

Create an engine and a UCI shell.
Sayuri::ChessEngine is a engine of calculation.
Sayuri::UCIShell is an object to mediate between
the engine and the outer with UCI commands.
You can create these objects by following codes.

    Sayuri::ChessEngine engine();
    Sayuri::UCIShell shell(engine);

    or

    Sayuri::ChessEngine* engine_ptr = new Sayuri::ChessEngine();
    Sayuri::UCIShell* shell_ptr = new Sayuri::UCIShell(*engine_ptr);

    or

    #include <memory>
    std::unique_ptr<Sayuri::ChessEngine>
    engine_ptr(new Sayuri::ChessEngine());
    std::unique_ptr<Sayuri::UCIShell>
    shell_ptr(new Sayuri::UCIShell(*engine_ptr));

[Maneuvering the library]
This library is like the ordinary UCI engine.
You can maneuver library with UCI commands.

If you want to control the library,
you need to use the following function with putting the commands into
"input" parameter.

    void UCIShell::InputCommand(const std::string& input)

You can receive outputs from the library by call-back function.
The type of call-back function is as follows.

    void name_of_function(const std::string& name_of_param)

The library gives UCI output into "name_of_param" parameter.

Your call-back function  can be registered to the library with
the following function of Sayuri::UCIShell.

    void
    UCIShell::AddOutputListener(std::function<void(const std::string&)> func)

[Example]
The simple example is as follows.

    #include <iostream>
    #include <string>
    #include <memory>

    #include "include/sayuri.h"  // A header file of Sayuri.

    // Your call-back function to receive the output from the library.
    // In this example, the output is sent to standard output.

    void Print(const std::string& message) {
        std::cout << message << std::endl;
    }

    // Main function.

    int main(int argc, char* argv[]) {

        /***************/
        /* Preparation */
        /***************/
        // Initialize the library. You "must" do this.

        Sayuri::Init();

        // Create an engine.

        std::unique_ptr<Sayuri::ChessEngine>
        engine_ptr(new Sayuri::ChessEngine());

        // Create an object to mediate with UCI commands.

        std::unique_ptr<Sayuri::UCIShell>
        shell_ptr(new Sayuri::UCIShell(*engine_ptr));

        // Register your call-back function to receive the output from
        // the library.

        shell_ptr->AddOutputListener(Print);

        /***************************/
        /* Maneuvering the library */
        /***************************/
        // You can control the library with InputCommand().

        shell->InputCommand("uci");

        // The library sends ID, configurable options and "uciok" output to
        // Print().

        shell->InputCommand("isready");

        // "redyok" output is sent to Print().

        shell->InputCommand("position startpos");
        shell->InputCommand("isready");

        // "redyok" output is sent to Print().

        shell->InputCommand("go depth 10");

        // The library runs another thread and start calculation.
        // The calculation is running on the another thread,
        // so the control will come back soon.

        while (......) {......}

        // Wait for concluding calculation.
        // In calculating, the library sends a lot of "info ..." output to
        // Print().
        // After calculation, the library sends the best move with
        // "bestmove ..." output to Print().

        return 0;
    }
--------------------------------------------------------------------------------
How to build distributable source code packages
--------------------------------------------------------------------------------
Execute a following command after making Makefile by CMake.
    $ make dist

And then following three packages will be created.
    sayuri-xxxx.xx.xx.tar.Z
    sayuri-xxxx.xx.xx.tar.bz2
    sayuri-xxxx.xx.xx.tar.gz
(Note) 'xxxx.xx.xx' is a version number.


--------------------------------------------------------------------------------
UCI Options
--------------------------------------------------------------------------------
With following commands, you can change setup of Sayuri.

To Change the size(megabytes) of a hash table.
(Default is 32. Maximum is 8192. Minimum is 8.)
    setoption name Hash value <size(megabytes)>

To Initialize the hash table.
    setoption name Clear Hash

To Enable ponder.
(Default is "true".)
    setoption name Ponder value <true or false>

To Change the number of threads.
(Default is 1. Maximum is 64. Minimum is 1.)
    setoption name Threads value <the number of threads>

To Enable analyse mode.
(Default is "false".)
    setoption name UCI_AnalyseMode value <true or false>
